# Ultralytics YOLO üöÄ, AGPL-3.0 license
# RT-DETR-l object detection model with P3-P5 outputs. For details see https://docs.ultralytics.com/models/rtdetr

# Parameters
nc: 80  # number of classes
scales: # model compound scaling constants, i.e. 'model=yolov8n-cls.yaml' will call yolov8-cls.yaml with scale 'n'
  # [depth, width, max_channels]
  l: [1.00, 1.00, 1024]

# From BiliBili È≠îÈ¨ºÈù¢ÂÖ∑
backbone:
  # [from, repeats, module, args]
  - [-1, 1, Conv, [64, 3, 2]]  # 0-P1/2
  - [-1, 1, Conv, [128, 3, 2]]  # 1-P2/4
  - [-1, 1, C2f_DCMB, [128]]
  - [-1, 1, Conv, [256, 3, 2]]  # 3-P3/8
  - [-1, 1, C2f_DCMB, [256]]
  - [-1, 1, Conv, [384, 3, 2]]  # 5-P4/16
  - [-1, 1, C2f_DCMB, [384]]
  - [-1, 1, Conv, [384, 3, 2]]  # 7-P5/32
  - [-1, 3, C2f_DCMB, [384]]

head:
  - [-1, 1, Conv, [256, 1, 1, None, 1, 1, False]]  # 9 input_proj.2
  - [-1, 1, AIFI, [1024, 8]] # 10
  - [-1, 1, Conv, [256, 1, 1]]  # 11, Y5, lateral_convs.0

  - [6, 1, Conv, [256, 1, 1]] # 12 P4
  - [[3, -1, -2], 2, HyperACE, [256, 8, True, True, 0.5, 1, "both"]] # P4/16
  - [-1, 1, nn.Upsample, [None, 2, "nearest"]] # P3/8
  - [13, 1, Conv, [256, 3, 2]] # 15 P5/32
  - [[12, 13], 1, FullPAD_Tunnel, []]  # 16 P4    
  - [[4, 14], 1, FullPAD_Tunnel, []]  # 17 P3 
  - [[11, 15], 1, FullPAD_Tunnel, []] # 18 P5

  - [-1, 1, nn.Upsample, [None, 2, 'nearest']]
  - [12, 1, Conv, [256, 1, 1, None, 1, 1, False]]
  - [[-2, -1], 1, Concat, [1]] # 21
  - [-1, 3, RepC3, [256, 0.5]]
  - [[-1, 13], 1, FullPAD_Tunnel, []] 
  - [-1, 1, Conv, [256, 1, 1]] # 24-P4

  - [-1, 1, nn.Upsample, [None, 2, 'nearest']]
  - [4, 1, Conv, [256, 1, 1, None, 1, 1, False]]
  - [[-2, -1], 1, Concat, [1]]
  - [-1, 3, RepC3, [256, 0.5]] # 28 P3
  - [[-1, 14], 1, FullPAD_Tunnel, []] # 29

  - [-1, 1, Conv, [256, 3, 2]]
  - [[-1, 23], 1, Concat, [1]]
  - [-1, 3, RepC3, [256, 0.5]]
  - [[-1, 13], 1, FullPAD_Tunnel, []] # 33 P4

  - [-1, 1, Conv, [256, 3, 2]]
  - [[-1, 10], 1, Concat, [1]]
  - [-1, 3, RepC3, [256, 0.5]]
  - [[-1, 15], 1, FullPAD_Tunnel, []] # 37

  - [[29, 33, 37], 1, RTDETRDecoder, [nc, 256, 300, 4, 8, 3]]  # Detect(P3, P4, P5)